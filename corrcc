#!/usr/bin/env python3

import sys
import os
import subprocess
import shutil
from enum import StrEnum

import correctionlib.schemav2 as schema
from correctionlib.highlevel import open_auto


import argparse


def create_parser():
    # Create the parser object
    parser = argparse.ArgumentParser(description="A correctionlib JSON to C compiler.")

    # Add a positional argument
    parser.add_argument("input_json_file", help="Input JSON file")

    # Add a list argument
    parser.add_argument(
        "--corrections", nargs="+", help="List of corrections to compile"
    )

    return parser


class Target(StrEnum):
    C = "C"
    CUDA = "CUDA"

    def fail(self) -> str:
        match self:
            case Target.C:
                return "exit(-1)"
            case Target.CUDA:
                return "assert(0)"
            case _:
                print("ERROR: Unknown target.", file=sys.stderr)
                sys.exit(-1)


class Variable:
    def __init__(
        self,
        *,
        correction_name: str,
        var_type: str,
        var_name: str,
        var_min: float | int | str,
        var_max: float | int | str,
        var_values: set[str | int],
    ) -> None:
        was_string = False

        match var_type:
            case "real":
                var_type = "float"
            case "string":
                var_type = f"{var_name}_{correction_name}"
                was_string = True
            case "int":
                pass
            case _:
                print(
                    f"ERROR: Could not identify type {var_type} for parameter {var_name}.",
                    file=sys.stderr,
                )
                sys.exit(-1)

        if var_type == "float":
            if var_min == float("-inf"):
                var_min = "-FLT_MAX"

            if var_max == float("inf"):
                var_max = "FLT_MAX"
            if var_max == float("+inf"):
                var_max = "FLT_MAX"

        if var_type == "int":
            print("WARINING: Validation of int variables is not implemented.")

        self.name: str = var_name
        self.type: str = var_type
        self.was_string: bool = was_string
        self.min: float | int | str = var_min
        self.max: float | int | str = var_max
        self.values: set[str | int] | None = var_values if var_values else None


def compiled_content(content: schema.Content, target: Target) -> str:
    match content:
        case schema.Binning():
            match content.edges:
                case schema.UniformBinning():
                    raise NotImplementedError(
                        "UniformBinning: This functionality has not been implemented yet."
                    )
                case list():
                    return compile_non_uniform_binning(content, target)
                case _:
                    print(f"ERROR: Could not identify binning type.", file=sys.stderr)
                    sys.exit(-1)
        case schema.MultiBinning():
            raise NotImplementedError(
                "MultiBinning: This functionality has not been implemented yet."
            )
        case schema.Category():
            return compile_category(content, target)
        case schema.Formula():
            raise NotImplementedError(
                "Formula: This functionality has not been implemented yet."
            )
        case schema.FormulaRef():
            raise NotImplementedError(
                "FormulaRef: This functionality has not been implemented yet."
            )
        case schema.Transform():
            raise NotImplementedError(
                "Transform: This functionality has not been implemented yet."
            )
        case schema.HashPRNG():
            raise NotImplementedError(
                "HashPRNG: This functionality has not been implemented yet."
            )
        case float():
            return compile_float(content, target)
        case _:
            print(f"ERROR: Could not identify content type.", file=sys.stderr)
            sys.exit(-1)


def compile_category(content: schema.Category, target: Target) -> str:
    keys = [str(c.key) for c in content.content]
    return "return 42.f"


def compile_non_uniform_binning(content: schema.Binning, target: Target) -> str:
    edges = [e for e in content.edges]
    edges = []
    for edge in content.edges:
        match edge:
            case float():
                edges.append(edge)
            case "inf":
                edges.append("MAX_FLOAT")
            case "+inf":
                edges.append("MAX_FLOAT")
            case "-inf":
                edges.append("-MAX_FLOAT")
            case _:
                print("ERROR: Could not parse {edge}.", file=sys.stderr)
                sys.exit(-1)
    n = len(edges)

    values = [f"{v}.0f" for v in list(range(len(edges) - 1))]

    if len(edges) != len(values) + 1:
        raise ValueError(
            f"Invalid input: edges must have exactly one more element than values. Got {len(edges)} edges and {len(values)} values"
        )

    if not all(edges[i] < edges[i + 1] for i in range(len(edges) - 1)):
        raise ValueError("Edges must be sorted in ascending order")

    n = len(edges)

    # Format the edges and values as C array initializers
    edges_str = ", ".join(
        [f"{e}f" if isinstance(e, (int, float)) else str(e) for e in edges]
    )
    values_str = ", ".join(
        [f"{v}f" if isinstance(v, (int, float)) else str(v) for v in values]
    )

    # Start building the function
    c_code = [
        # f"float intervalLookup(float ___QUERY___) {{",
        f"    // Embedded edges and values arrays",
        f"    float edges[{n}] = {{{edges_str}}};",
        f"    float values[{n-1}] = {{{values_str}}};",
        f"",
    ]
    match content.flow:
        case "clamp":
            c_code.extend(
                [
                    f"    // Handle edge cases",
                    f"    if (___QUERY___ < edges[0]) {{",
                    f"        {compiled_content(content.content[0], target)};",
                    f"    }}",
                    f"    if (___QUERY___ >= edges[{n-1}]) {{",
                    f"        {compiled_content(content.content[n-2], target)};",
                    f"    }}",
                ]
            )
        case "error":
            c_code.extend(
                [
                    f"    // Handle edge cases",
                    f"    if (___QUERY___ < edges[0]) {{",
                    f'        fprintf(stderr, "ERROR: ___QUERY___ is out of bounds.\\n");{ target.fail() };',
                    f"    }}",
                    f"    if (___QUERY___ >= edges[{n-1}]) {{",
                    f"        {compiled_content(content.content[n-2], target)};",
                    f"    }}",
                ]
            )
        case _:
            c_code.extend(
                [
                    f"    // Handle edge cases",
                    f"    if (___QUERY___ < edges[0]) {{",
                    f"        {compiled_content(content.flow, target)};",
                    f"    }}",
                    f"    if (___QUERY___ >= edges[{n-1}]) {{",
                    f"        {compiled_content(content.flow, target)};",
                    f"    }}",
                ]
            )

    # Generate the binary search tree
    def generate_tree(start, end, depth=0):
        # Base case: leaf node (one interval)
        if end - start == 1:
            return [
                f"{' ' * (depth * 4)} {compiled_content(content.content[start], target)}; // edges[{start}] <= ___QUERY___ < edges[{start+1}]"
            ]

        # Base case: two intervals left
        if end - start == 2:
            return [
                f"{' ' * (depth * 4)}if (___QUERY___ < edges[{start+1}]) {{",
                f"{' ' * ((depth+1) * 4)}{compiled_content(content.content[start], target)}; // edges[{start}] <= ___QUERY___ < edges[{start+1}]",
                f"{' ' * (depth * 4)}}} else {{",
                f"{' ' * ((depth+1) * 4)} {compiled_content(content.content[start+1], target)}; // edges[{start+1}] <= ___QUERY___ < edges[{start+2}]",
                f"{' ' * (depth * 4)}}}",
            ]

        # Recursive case: split the search space
        mid = start + (end - start) // 2

        code = [f"{' ' * (depth * 4)}if (___QUERY___ < edges[{mid}]) {{"]

        # Left subtree
        code.extend(generate_tree(start, mid, depth + 1))

        code.append(f"{' ' * (depth * 4)}}} else {{")

        # Right subtree
        code.extend(generate_tree(mid, end, depth + 1))

        code.append(f"{' ' * (depth * 4)}}}")

        return code

    # Generate the tree and add it to the function with a comment
    c_code.append("")
    c_code.append(
        "    // Binary search implemented as a balanced decision tree with if/else statements"
    )
    c_code.extend(["    " + line for line in generate_tree(0, n - 1)])

    return "\n".join(c_code).replace("___QUERY___", content.input)


def compile_float(content: schema.Content, target: Target) -> str:
    return f"return { content }"


class CorrectionBuilder:
    def __init__(self, *, name: str, target: Target = Target.C) -> None:
        self.name: str = name
        self.vars: dict[str, Variable] = {}
        self.target = target
        self.description: str | None = ""
        self.content = None

    def set_target(self, target: Target) -> "CorrectionBuilder":
        self.target = target

        return self

    def set_description(self, description: str | None) -> "CorrectionBuilder":
        if description:
            self.description = description

        return self

    def add_var(
        self,
        *,
        var_type: str,
        var_name: str,
        var_min: float | int | str,
        var_max: float | int | str,
        var_values: set[str | int],
    ) -> "CorrectionBuilder":
        self.vars[var_name] = Variable(
            correction_name=self.name,
            var_type=var_type,
            var_name=var_name,
            var_min=var_min,
            var_max=var_max,
            var_values=var_values,
        )

        return self

    def set_content(self, content: schema.Content) -> "CorrectionBuilder":
        self.content = content

        return self

    def _compile_content(self) -> str:
        if len(self.vars) == 0:
            print("ERROR: No variables have been added.", file=sys.stderr)
            sys.exit(-1)

        if not (self.content):
            print("ERROR: No content have been added.", file=sys.stderr)
            sys.exit(-1)

        return compiled_content(self.content, self.target)

    def _build_enums(self) -> str:
        enums_declaration = ""
        for v in self.vars:
            if self.vars[v].was_string:
                _values = self.vars[v].values
                if _values:
                    enums_body = ", ".join(
                        [f"{str(v).upper()}_{self.name}" for v in _values]
                    )
                    enums_declaration += f"""
                            typedef enum {{
                                {enums_body}
                            }} {self.vars[v].type};
                            """
        return enums_declaration

    def _argument_validation(self) -> str:
        validation = ""
        for var in self.vars:
            if not self.vars[var].was_string:
                validation += f"""
                    if ({self.vars[var].name} < {self.vars[var].min} || {self.vars[var].name} > {self.vars[var].max}) {{ fprintf(stderr, "ERROR: {self.vars[var].name} is out of bounds.\\n");
                    { self.target.fail() }; }};
               """
        return validation

    def _dump(self) -> str:
        enums = self._build_enums()
        args = ", ".join(
            [f"const {self.vars[var].type} {self.vars[var].name}" for var in self.vars]
        )

        argument_validation = self._argument_validation()

        compiled_content = self._compile_content()

        c_func = f"""
        #include <stdlib.h>
        #include <stdio.h>
        #include <float.h>

        {enums}
        /*\n{self.description}\n*/
        float {self.name}({args}){{
        {argument_validation}

        {compiled_content}

        fprintf(stderr, "ERROR: Exausted branches. This should never happen.\\n");
        {self.target.fail()};
        }}

        """
        return c_func

    def save(self, *, output_dir: str = "corrections", do_format: bool = False) -> None:
        os.makedirs(output_dir, exist_ok=True)
        if do_format and shutil.which("clang-format"):
            try:
                res = subprocess.run(
                    ["clang-format"], input=self._dump(), capture_output=True, text=True
                )
                if res.returncode == 0:
                    with open(f"{output_dir}/{self.name}.h", "w") as f:
                        f.write(res.stdout)
            except subprocess.CalledProcessError as e:
                print(
                    f"ERROR: Could not run clang-format failed with error: {e}",
                    file=sys.stderr,
                )
        else:
            if do_format:
                print(
                    f"WARNING: Could not format correction file. Try to install clang-format with: python3 -m pip install --user clang-format",
                )
            with open(f"{output_dir}/{self.name}.h", "w") as f:
                f.write(self._dump())


def main():
    # Parse command-line arguments
    parser = create_parser()
    args = parser.parse_args()

    corr_set = schema.CorrectionSet.model_validate_json(open_auto(args.input_json_file))
    for i, c in enumerate(corr_set.corrections):
        if not (args.corrections) or c.name in args.corrections:
            print(f"Processing: {c.name}")
            builder = CorrectionBuilder(name=c.name).set_description(c.description)

            _, variables = c.summary()

            for i in c.inputs:
                builder.add_var(
                    var_type=i.type,
                    var_name=i.name,
                    var_min=variables[i.name].min,
                    var_max=variables[i.name].max,
                    var_values=variables[i.name].values,
                )

            builder.set_content(c.data)
            builder.save(do_format=True)


if __name__ == "__main__":
    main()
